/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "i2c.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TEMP 0
#define HUMI 1
/*****************COMMAND SET 8*****************/
#define SHT2x_ADDR                  (0x40 << 1)
#define SHT2x_HOLD_MASTER_T         0xE3
#define SHT2x_HOLD_MASTER_H         0xE5
#define SHT2x_NOHOLD_MASTER_T       0xF3
#define SHT2x_NOHOLD_MASTER_H       0xF5
#define SHT2x_WRITE_USER_REG        0xE6
#define SHT2x_READ_USER_REG         0xE7
#define SHT2x_SOFT_RESET            0xFE

#define STK_CTRL  *(volatile unsigned int*)0xE000E010
#define STK_LOAD  *(volatile unsigned int*)0xE000E014
#define STK_VAL   *(volatile unsigned int*)0xE000E018
#define STK_CALIB *(volatile unsigned int*)0xE000E01c
   
#define ENABLE 0
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t rxData;
FILE __stdout;
uint32_t pwmF;
uint16_t scale[] = {523, 587, 659, 698, 783, 880, 987, 1046};
uint16_t adcData[2];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int fputc(int ch, FILE* stream)
{
   HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
   
   return ch;
}

float SHT20(int);
void SHT20_Init();

void usDelay(uint16_t us);
void SysTic_Init();
void HAL_Delay_Porting();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
   
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
	MX_TIM10_Init();
  MX_ADC1_Init();
	MX_I2C1_Init();
	SHT20_Init();
   
  void menu();
  void processInput1();
  void processInput2();
  void processInput3();
  void processInput4();
  void processInput5();
	void processInput6();
  void piano();
	

   
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 1);
	 
  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start(&htim10);
  /* USER CODE END 2 */
    
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
   menu();

  while (1)
  {
      //printf("%c\n\r",rxData);
      HAL_Delay(300);
      if(rxData == '1'){
         printf("%c\n\r", rxData);
         printf("1. LED Shift\n\r");
         printf("Right = 'r', Left = 'l', End = 'n'\n\r");
         processInput1();
      }
      
      if(rxData == '2'){
         printf("2. Mood Light\n\r");
         printf("If you want to finish, press 'n'\n\r");
         processInput2();
      }
         
      if(rxData == '3'){
        printf("3. Piano\n\r");
        printf("Let's play piano~!");   
				printf("If you want to finish, press 'n'\n\r");
				processInput3();
      }
         
      if(rxData == '4'){
        printf("4. Street Light\n\r");
			  printf("If you want to finish, press 'n'\n\r");
				processInput4();
      }
         
      if(rxData == '5'){
				printf("5. Temp/Humi\n\r");
			 	printf("If you want to finish, press 'n'\n\r");
				processInput5();
      }
			
		  if(rxData == '6'){
				printf("6. ultrasonic sensor\n\r");
			 	printf("If you want to finish, press 'n'\n\r");
				processInput6();
      }
			
			if(rxData == '0'){
				printf("Power OFF\n\r");
				return 0;
      }
			
	
         
            
    /* USER CODE END WHILE */
   
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2){
      HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
   }  
}

void menu()
{
   printf("******Embeded System******\n\r");
   printf("0. End\n\r");
   printf("1. LED Shift\n\r");
   printf("2. Mood Light\n\r");
   printf("3. Piano\n\r");
   printf("4. Street Light\n\r");
   printf("5. Temp/Humi\n\r");
	 printf("6. ultrasonic sensor\n\r");
}

void processInput1()   //led shift(PC0~PC7)
{
      while(1)
      {
         static int i = 0;
         HAL_Delay(300);
         //printf("%d\r\n",i);
         
         if(rxData == 'r')
           {
             i++;
             if(i == 8)   {i = 0;}
           }
      
         if(rxData == 'l')
           {
             i--;
             if(i < 0)    {i = 7;}
           }
      
         if(rxData == 'o')
           {
             i = i;     
           }   
         if (rxData == 'n')
           {
						menu();
						break;
           }
                           
      //printf("%d",i);
      HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin << i, 1);
      HAL_Delay(300);
      HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin << i, 0);                 
   }
}

void processInput2()   //mood light(TIM3-PA6)
{
    printf("Mood Light Start");   
   static int direction = 3;
   uint32_t CCRVal = 0;
   
   while(1)
   {
      TIM3->CCR1 = CCRVal;
      HAL_Delay(100);
      CCRVal += direction;
      
      if(CCRVal >= 50 || CCRVal <= 0)
      {
         direction = -direction;
      }
      
      if(rxData == 'n')
      {
         TIM3->CCR1 = 0;
         menu();
         break;
      }   
   }      
}

void piano()
{
      TIM1->ARR = pwmF - 1;      
      TIM1->CCR2 = pwmF / 2;   
      HAL_Delay(300);
      TIM1->ARR = 0;
      TIM1->CCR2 = 0;     
			rxData = 0;
}

void processInput3()   //piano(TIM1-PA9)
{
	
   while(1){
   HAL_Delay(10);
      if(rxData == 'a'){
         pwmF = 10000000 / scale[0];
         piano();
      }
      if(rxData == 's'){
         pwmF = 10000000 / scale[1];
         piano();  			
      }
      if(rxData == 'd'){
         pwmF = 10000000 / scale[2];
         piano();   
      }
      if(rxData == 'f'){
         pwmF = 10000000 / scale[3];
         piano();   
      }
      if(rxData == 'g'){
         pwmF = 10000000 / scale[4];
         piano();   
      }
      if(rxData == 'h'){
         pwmF = 10000000 / scale[5];
         piano(); 				
      }
      if(rxData == 'j'){
         pwmF = 10000000 / scale[6];
         piano();   
      }
      if(rxData == 'k'){
         pwmF = 10000000 / scale[7];
         piano();  			
      }
      
      if(rxData == 'n'){
         menu();
         break;
      }               
}
}

void processInput4()   //Street Light(PA1)
{
   static int i = 0;
   while(1){
      
			printf("ADC : %d\n\r", adcData[0]);
			HAL_Delay(500);

      if(adcData[0] >3500){
      HAL_GPIO_WritePin(GPIOC,GPIO_PIN_All, 0);
      }

      if( (3500 > adcData[0]) &&  (adcData[0] > 3300)){
      HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
      }

      if( (3300 > adcData[0]) &&  (adcData[0] > 3100)){
       for(i = 0; i < 3; i++)
         {
          HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin << i, 1);
         }
      }

     if( (3100 > adcData[0]) &&  (adcData[0] > 2900)){
      for(i = 0; i < 4; i++)
         {
          HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin << i, 1);
         }
      }

      if( (2900 > adcData[0]) &&  (adcData[0] > 2700)){
       for(i = 0; i < 5; i++)
         {
          HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin << i, 1);
         }
      }

      if( (2700 > adcData[0]) &&  (adcData[0] > 2500)){
       for(i = 0; i < 6; i++)
         {
          HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin << i, 1);
         }
      }

      if( (2500 > adcData[0]) &&  (adcData[0] > 2400)){
       for(i = 0; i < 7; i++)
         {
          HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin << i, 1);
         }
      }

      if(adcData[0] < 2400) {
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_All, 1);
      }
			
			if(rxData == 'n'){
         menu();
				 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_All, 0);	
         break;
      } 

   }
}   
void processInput5()   //Temp/Humi
{
   float temperature, humidity;
	
	 while(1){
		temperature = SHT20(TEMP);
		humidity = SHT20(HUMI);
		
		printf("TEMP = %.2lf", temperature);
		HAL_Delay(500);
		
		printf("HUMI = %.2lf\n\r", humidity);
		HAL_Delay(500);
		
	  if(rxData == 'n'){
     menu();
     break;
    } 
			
	 }
}
void SHT20_Init(void)
{
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SHT2x_ADDR, (uint8_t*)SHT2x_SOFT_RESET, 1, 0xffff) == HAL_OK)
	{
		printf("SHT20 RESET FAIL ㅠ__ㅠ\n\r");
	}
	else{
		printf("SHT20 RESET SUCCESS!!\n\r");
	}
}

float SHT20(int select)
{
	uint8_t I2CData[3];
	uint16_t SLAVE_ADDR = SHT2x_ADDR;
	uint16_t sensor;
	float convData = 0.0;


	if(select == TEMP){
		I2CData[0] = SHT2x_NOHOLD_MASTER_T;		
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SLAVE_ADDR, (uint8_t*)I2CData, 1, 0xffff);
		HAL_Delay(100);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SLAVE_ADDR, (uint8_t*)I2CData, 2, 0xffff);
		//I2CData[0], I2CData[1]
		sensor = I2CData[0] << 8 | I2CData[1];
		convData = -46.85 + 175.72 / 65536 * (float)sensor;
	}
	else if(select == HUMI){
		I2CData[0] = SHT2x_NOHOLD_MASTER_H;		
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SLAVE_ADDR, (uint8_t*)I2CData, 1, 0xffff);
		HAL_Delay(100);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SLAVE_ADDR, (uint8_t*)I2CData, 2, 0xffff);
		sensor = I2CData[0] << 8 | I2CData[1];
		convData = -6.0 + 125.0 / 65536 * (float)sensor;
	}
	return convData;
}
void processInput6()		//TIM10
{
  uint16_t cnt = 0;
  uint32_t echoTime = 0;
  uint32_t pwmF;

  TIM1->EGR = TIM1->EGR | 0x01;
   
  while(1){
   
     SysTic_Init();
     //구현파 발생 조건
     HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
     usDelay(15);
     HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
      
     while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 0);         
     STK_CTRL |= (1 << ENABLE);               //SysTick timer start
     while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1);
     echoTime = HAL_GetTick();
     STK_CTRL &= ~(1 << ENABLE);
     //340m/s -> 340 * 100cm/1000000us -> 0.034cm/u s
      
     printf("Distance = %.1lf cm\n\r", echoTime / 2 * 0.034);
		 printf("If you want to finish, press 'n'\n\r");	
  
       
     HAL_Delay_Porting();
     HAL_Delay(200);
      
     if ( 0.0 < (echoTime / 2 * 0.034) && (echoTime / 2 * 0.034) < 5.0) {
       pwmF = 10000000 / 523;
       TIM1 -> ARR = pwmF -1;
       TIM1 -> CCR2 = pwmF / 2;
       HAL_Delay(100);
       TIM1->ARR = 0; 
       TIM1->CCR2 = 0;
     }
		 else if ( 5.0 < (echoTime / 2 * 0.034) && (echoTime / 2 * 0.034) < 10.0) {
       pwmF = 10000000 / 523;
       TIM1 -> ARR = pwmF -1;
       TIM1 -> CCR2 = pwmF / 2;
       HAL_Delay(300);
       TIM1->ARR = 0; 
       TIM1->CCR2 = 0;
		 }	 
		 else if ( 10.0 < (echoTime / 2 * 0.034) && (echoTime / 2 * 0.034) < 15.0) {
       pwmF = 10000000 / 523;
       TIM1 -> ARR = pwmF -1;
       TIM1 -> CCR2 = pwmF / 2;
       HAL_Delay(400);
       TIM1->ARR = 0; 
       TIM1->CCR2 = 0;
		 }
		 
		 if(rxData == 'n'){
				menu();
				break;
    } 
       
   }
}

void usDelay(uint16_t us){
  __HAL_TIM_SET_COUNTER(&htim10, 0);   
  while(__HAL_TIM_GET_COUNTER(&htim10) < us){    
  }
}

void SysTic_Init()
{
   STK_LOAD = 100 - 1;
   STK_VAL = 0;
   STK_CTRL = 6; 
   uwTick = 0;
}

void HAL_Delay_Porting()
{
   STK_LOAD = 100000 - 1;
   STK_CTRL |= 7;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
